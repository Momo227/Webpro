1.1 <script> タグ
 JavaScript は HTML ファイル内に<script>タグを使って記述します。

<script type="text/javascript">
～
</script>


1.2 コメント

//1 行コメント
/*
複数行コメント
*/


1.3 変数と変数の型
 var を使って宣言します。
 変数の型には、数値型、論理型、文字列型、null 値という 4 つがありますが、自動的に決定されま
す。
 変数には、グローバル変数とローカル変数があります。関数の外で宣言したものはグローバル変数となり、どの関数からで
も参照できるようになります。

//数値型
var x = 1000;
var y = 3.14;
//論理型
var flag = true;
var shown = false;
//文字列型
var str = "あいうえお";


1.4 関数
　function 文を使って関数の宣言を行います。括弧内にカンマ区切りで引数を与えることもできます。

 function foo(x){
  x++;
  return x;
 }


1.5 break
　break 文は最も内側の for、while、do ループや、switch 文の case 節を抜けるときに使います。
　break 文は二重ループや三重ループを一度に抜けたい場合にも利用できます。

  abc:
  for(i = 0; i < 10; i++){
  for(j = 0; j < 10; j++){
  ・・・
  if( 何か条件を満たしたら ) break abc;
  }
  }


1.6 continue
　ループ内の残りの処理をスキップし、次のループに移る際に使います。
　continue 文は二重ループや三重ループの指定した場所の次のループに移る場合にも利用できます。

  abc:
  for(i = 0; i < 10; i++){
  for(j = 0; j < 10; j++){
  ・・・
  if( 何か条件を満たしたら ) continue abc;
  }
  }


1.7 オブジェクト操作

1.7.1 new 演算子
　新しくオブジェクトのインスタンス(オブジェクトの実体)を作成します。

　var インスタンス名＝new オブジェクトの型(パラメータ);


1.7.2 this
　現在のオブジェクトを参照します。現在のオブジェクトは、文書内のどこで使われて
いるかで変化します。


1.7.3 for … in 文
 オブジェクトのプロパティを全て列挙します。

 for( 変数名 in オブジェクトのインスタンス名 ){
・・・
}

どのようなプロパティがあるかを表示するときに利用します。主にデバッグ用です。


1.7.4 with
　1 つのオブジェクトのいくつかのプロパティをまとめて操作したい場合に、この with 文を使うとコードの記述量を減らすこ
とができます。

  <script type="text/javascript">
  document.bgcolor="white";
  document.fgcolor="black";
  </script>
  ↓
  <script type="text/javascript">
  with( document ){
  bgcolor="white";
  fgcolor="black";
  }
  </script>


1.8 イベントハンドラ
   イベントが何か行ったときに発生するものです。処理するイベントハンドラを HTML タグの属性部分
  に指定します。

  onClick, onDblClick, onKeyDown, onKeyPress, onKeyUp, onMouseDown, onMouseUp, onMouseOver,
  onMouseOut, onMouseMove, onLoad, onUnload, onFocus, onBlur, onSubmit, onReset, onChange, onResize, onMove,
  onDragDrop, onAbort, onError, onSelect 　など


1.8.1 onClick
　マウスをクリックしたときに発生するイベントハンドラです


1.9 オブジェクト
　オブジェクトには、メソッドとプロパティがあります。ブラウザに関連するオブジェクトの階層図は図 1 のとおりです。このようにオブジェクトの中にはオブジェクトを
含むことができます。

1.9.1 window オブジェクト
　ブラウザのウィンドウ画面を表すオブジェクトです。よく使われるものだけを説明します。
プロパティ：機能
defaultStatus：ステータスバーに表示されるデフォルトのメッセージ
status：ステータスバーに表示中のメッセージ
name：表示されているウィンドウ名を取得する

メソッド：能
alert(msg)：警告ダイアログボックスを表示する
prompt(msg,init)：入力欄付きダイアログボックスを開く。init は入力欄の初期値となる文字列を指定する。
open(url,name[,style])：新たなウィンドウを開く


1.9.2 document オブジェクト
 document オブジェクトは最も頻繁に利用するオブジェクトです。画面に表示されている Web ページを表します。
プロパティ：機能
alinkColor：読み込み中のアクティブなリンクの文字色を参照、または設定する
anchors：現在表示されている全アンカーの内容を持つオブジェクトの配列
bgColor：背景色を参照、または設定する
cookie：ちょっとした情報を入れるための文字列型オブジェクト(クッキー)
domain：ドメイン名を返す
fgColor：文字色を参照、または設定する
forms：現在表示されている全フォームの内容を持つオブジェクトの配列
lastModified：在表示されているページの最終更新日を参照する
linkColor：リンクの文字色を参照、または設定する
links：現在表示されている全アンカーの内容を持つオブジェクトの配列
location：現在表示されているドキュメントの URI を参照、または設定する
referrer：移動先の呼び出した URI を参照する
title：ページのタイトルを参照、または設定する
vlinkColor：訪問済みのリンクの文字色を参照、または設定する

メソッド：機能
clear()：表示中のドキュメント内容を消去する
close()：表示ストリーム(open で開始したドキュメントの出力)を閉じる
open()：表示ストリーム(ドキュメントの出力)を開始する
write(msg1, msg2, …,)：ページに指定した文字列を表示する
writeln(msg1, msg2, …)：ページに指定した文字列に改行を加えて表示する


1.9.3 image オブジェクト
 画像オブジェクトともいいます。画像の情報を扱います。
プロパティ：機能
border：画像が持つ枠線の値をピクセル単位で参照する
complete：画像の読み込みが完了した場合に真(true)、完了前は偽(false)を返す
height：画像の高さを参照する
hspace：画像と他のオブジェクトとの横の間隔を参照する
length：表示されているドキュメント中にある画像の数を参照する
lowsrc：低解像用画像の URI を参照、または設定する
name：ドキュメントにある画像の名前を参照、または設定する
src：作成した画像オブジェクトの URI を参照、または設定する
vspace：画像と他のオブジェクトとの縦の間隔を参照する
width：画像の横幅をピクセル単位で参照する


1.9.4 Array(配列)オブジェクト
　JavaScript では配列はオブジェクトとして作成します。配列の作成方法は下記のとおりです。
 var 配列名 = new Array(); ← 要素数 0 の配列を作成 var 配列名 = []; でも作成できる。
 var 配列名 = new Array(7); ← 要素数 7 の配列を作成
 var 配列名 = new Array("日 " , "月 " , "火 " , "水 " , "木 " , "金 " , "土 " );
 var 配列名 = [ "日 " , "月 " , "火 " , "水 " , "木 " , "金 " , "土 " ] ;

 プロパティ：機能
 length：配列要素の個数を表します

 メソッド：機能
 concat(arr1, arr2, …)：配列 arr1, arr2, … を連結した配列を返します。
 join([separator])：各要素を separator で連結した文字列を返します。
 reverse()：逆順に並べ替えた配列を返します。
 slice(start[,end])：start 番目から end-1 番目までの要素を抜き出した配列を返します。
 sort([func])：並べ替えた配列を返します。


 1.9.5 String オブジェクト
  文字列に関するオブジェクトです。よく使われるものだけを説明します。
 メソッド：機能
 charAt(n)：指定した位置の１文字を抜き出す
 charCodeAt(n)：指定した位置の文字の文字コードを返す (２バイト文字も可能)
 fromCharCode(code1,…)：アスキーコードを文字に変換する
 indexOf(kw[,from])：指定した文字列を検索する
 length()：文字列の文字列長(文字数)を返す
 match(regexp)：正規表現による検索を行い、一致した文字列を返す
 replace(regexp,newstr)：文字列を指定した文字列に置き換える
 search(regexp)：一致する文字列があるか調べ見つかった位置を返す
 slice(from[,to])：substring とほぼ同じですが、from が負の場合、文字列の最後の部分を抜き出します。
 例えば、”0123456789”.slice(-3) は “789” になります。
 split([separator[,limit]])：文字列を区切り文字で分割し、配列として返す
 substring(from[,to])：from (先頭は 0)から to - 1 番目のまでの文字列を抜き出す
 toLowCase()：アルファベット文字列をすべて小文字に変換する
 toUppreCase()：アルファベット文字列をすべて大文字に変換する


 1.9.6 Date オブジェクト
  日付や時刻に関するオブジェクトです。よく使われるものだけを説明します。
 メソッド：機能
 getDate()：日にちを参照する
 getDay()：曜日を参照する（0～6、日曜～土曜）
 getFullYear()：4 桁の西暦年を参照する
 getHours()：時間を参照する
 getMilliseconds()：ミリ秒を参照する
 getMinutes()：分を参照する
 getMonth()：月を参照する（0～11、1 月～12 月）
 getSeconds()：秒を参照する
 getTime()：1970 年 1 月 1 日午前 0 時からの経過時間（ミリ秒）を参照する
 getYear()：年（西暦の下２桁）を参照する
 toLocalString()：ローカル（地域別）時間を文字列として参照する


 1.9.7 Math オブジェクト
数学関連のオブジェクトです。Math.abs(x) のようにして使います。
メソッド：機能
abs(x)：絶対値を返す
ceil(x)：小数点以下があれば切り上げます。-2.1 の場合、-2 になります。
floor(x)：小数点以下があれば切り捨てます。-2.1 の場合、-3 になります。
max(x1,x2,x3,…)：最大値を返す
min(x1,x2,x3,…)：最小値を返す
pow(x,y)：x の y 乗を返す
random()：0 以上 1 未満の乱数値を返す
round(x)：x の小数点以下第一位を四捨五入して、整数値を返す
sqrt(x)：x の平方根を返す


1.10 システム関数
　どのオブジェクトにも属さない関数を組み込み関数あるいはシステム関数と呼んでいます。ここでは、よく使われるものを説
明します。

1.10.1 setTimeout()
一定時間経過した後に、あるプログラムコードを実行したいときに利用します。

timeoutID = setTimeout("実行する文", 何ミリ秒後);

実行する文は、1 回しか実行されないため、繰り返し呼ぶ場合には、再度、setTimeout()を実行します。


1.10.2 clearTimeout()
 setTimeout()で設定したタイマーをキャンセルします。

 clearTimeout(timeoutID);

timeoutID は setTimeout()を呼び出したときに返される値を指定します。


1.10.3 eval()
　引数で与えられる文字列を数式として計算した値を返します。
eval("1+2*3")は 7 を返します。eval("x+1") は変数 x の現在の値に 1 を加えた値を返します。JavaScript ならではの強力な
関数です。実際、電卓のプログラムなどはこの関数を使うことで簡単に書くことができます。
