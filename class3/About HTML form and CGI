1.1 HTML フォームの基本
フォームを作成する際には、<form>～</form> のようにします。
 <form>～</form>
  name=”フォーム名”
  フォームに名前を付けます。name=”form1” や name=”form2” のようにします。1 つの HTML フ
  ァイル内に複数のフォームを記述した際に、それらを区別するときに利用します。

  action=”URI”
  フォームに入力された内容を引き渡す URI を指定します。通常は、フォームの内容を処理する
  CGI プログラムの URI を記述します。

  method=”メソッド”
  メソッドには、GET か POST を指定します。
  GET の場合には、URI に次に示すような引数の形でデータを渡します。
  URI?変数名=値[&変数名=値] [&変数名=値] [&変数名=値] ……
  値は文字コードによっては特定の形式でエンコーディングされます。CGI プログラムには
  QUERY_STRING という名前の環境変数にこのデータが入ります。Web サーバーの制限により、
  あまり長すぎるデータは途中で切られてしまいます。
  POST の場合には、データは CGI プログラムの標準入力に送られます。また、環境変数
  CONTENT_LENGTH にデータのサイズが入ります。

1.2 ボタン
 ボタンを表示します。
 <input type="button" name="名前" value="ボタンに表示する文字列">

1.3 リセットボタン
 見た目は 1.2 のボタンと同じですが、同じフォーム内にある入力した内容をすべて初期化します。
通常、value には、"リセット"や"クリア"といった文字列を指定します。
<input type="reset" value="リセット">

1.4 送信ボタン
 外観はただのボタンと全く同一です。唯一の違いは、送信ボタンを押すと同じフォーム内の全てデータが<form>タグの action
属性に記載された URI に引き渡されることです。ほとんどの場合、フォームにはこの送信ボタンが必要となります。
ボタンの横の長さは、value=" 送信 " のように空白文字を入れて調節します。
<input type="submit" value=" 送信 ">

1.5 チェックボックス
 チェックボックスはチェックの入った状態と入っていない状態の 2 つの状態を持ちます。
 予めチェックが入った状態(☑)にするには、下記のように checked を加えます。
<input type="checkbox" name="名前" checked>チェックボックスの項目 1

1.6 ラジオボタン
　ラジオボタンもチェックの入った状態と入っていない状態の 2 つの状態を持ちます。しかし、チェックを入れることのできる
ものが、同じグループの中では 1 つだけに限られるという点がチェックボックスと異なる点です。name 属性には、グループ名
を記入します。
<input type="radio" name="r1" value="項目 1">項目 1
<input type="radio" name="r1" value="項目 2">項目 2
<input type="radio" name="r1" value="項目 3">項目 3
name 属性で指定した名前が同じだと同一のグループとなります。上記の例では、項目 1 から項目 3 まで、どれか 1 つにしか
チェックが入れられません。

1.7 テキストフィールド
テキストフィールドでは、自由に文字を入力することができます。
最初に何も表示しない場合には、value 属性は省略できます。テキストフィールドの横の長さは size 属性で指定します。
<input type="text" name="名前" value="最初に表示される文字列" size=20>

1.8 パスワードフィールド
パスワードフィールドはテキストフィールドと似ています。唯一の違いは、入力した文字の代わりに * が表示されるという
点です。パスワードの入力に用いられます。
<input type="password" name="名前" size=20>

1.9 テキストエリア
テキストフィールドでは 1 行だけですが、テキストエリアは複数行に渡って入力できます。
他のフォームと違って、<input>タグを使いません。代わりに次のようにします。
rows には表示エリアの行数、cols は 1 行の文字数(半角)を指定します。
rows で指定した行数を超えた場合には、自動的に縦方向のスクロールバーが付きます。
予めテキストエリアに文章を書き込んでおく場合には、下記のようにします。
<textarea name="ta1" rows=3 cols=40>最初に書かれている文章</textarea>

1.10 選択リスト
 選択リストには、項目を 1 つだけ選択できるドロップダウン型（プルダウン型ともいいます）と、複数個選択できるリスト型
があります。どちらも<select>タグを使います。

1.10.1 ドロップダウン型
 選択 1 という文字列が 2 ヵ所にありますが、value 属性に記載されている選択 1 はフォームデータとして送信される文字列で
す。2 つ目のものは選択リストに表示される文字列です。それぞれ別の文字列にすることもできますが、通常は、上記のように
同一にします。
<select name="名前">
<option value="選択 1">選択 1
<option value="選択 2">選択 2
<option value="選択 3">選択 3
</select>

1.10.2 リスト型
 <select>タグに multiple を指定すると、複数個選択できるリスト型になります。size 属性には、表示行数を指定します。省
略すると、4 になります。この size 属性はドロップダウン型でも指定することができます。
<<select name="名前[]" size="3" multiple>
<option value="選択 1">選択 1
<option value="選択 2">選択 2
<option value="選択 3">選択 3
</select>
ドロップダウン型と同様に、value 属性に記載されている選択 1 はフォームデータとして送信される文字列です。2 つ目のも
のは選択リストに表示される文字列です。
 name 属性のところには、name="○○○[]" のように最後に [] を加えてください。CGI が PHP で書かれている場合には、[] が
必要となります。PHP では、リスト型の場合は、フォームデータを配列で受け取るからです。
 CGI が PHP 以外の言語で書かれている場合、name 属性の最後に[] は必要ありません。
 また、リスト型の選択リストはチェックボックスで代用できるため、実際はほとんど使われていません。

1.11 隠しフィールド
隠しフィールド（不可視フィールドともいう）は Web ページ上には表示しないフォームデータです。こっそり CGI に渡した
いデータがある場合に使います。ユーザーが変更できない情報や特にユーザーに見せる必要のない情報を埋め込む場合に利用さ
れます。
名前と値のところは自由に決めることができます。
<input type="hidden" name="名前" value="値">


2 HTML の応用
 HTML5 で追加された機能やちょっとした応用編を紹介します。
2.1 数値のみの入力欄
 テキストフィールドで、数値だけの入力を許可したい場合があります。その場合は、HTML5 で追加された数値のみに限定で
きるテキストフィールドを利用します。
<input type="number" name="名前" value="最初に表示される数値" size=20>

2.2 日付の自動補完
日付を入力するところで、予め今日の日付を入れるようなこともできます。この場合は、JavaScript を利用します。
d.getMonth() は 1 月は 0、2 月は 1、…、12 月は 11 を返すので、-1 をする必要はありません。
一方、d.getDate() は 1 から 31 までの値を返すので、配列を参照する際には -1 する必要があります。
<form name="form">
<select name="month">
<script type="text/javascript">
 for(i=1;i<=12;i++){
 document.write("<OPTION>" + i)
 }
</script>
</select>
月
<SELECT name="date">
<script type="text/javascript">
 for(i=1;i<=31;i++){
 document.write("<OPTION>" + i)
 }
</script>
</select>
日
<script type="text/javascript">
var d = new Date();
document.form.month.options[d.getMonth()].selected = true; //月にチェックを入れる
document.form.date.options[d.getDate()-1].selected = true; //日にチェックを入れる
</script>
</form>

2.3 戻るページ
HTML フォームでは、入力後の送信前に確認画面を表示させることがよくあります。その確認画面から戻りたい場合に、<a
href=”form.html”>戻る</a> のようにしてしまうと、form.html を再読み込みしてしまうため、入力した内容が消えてしまい
ます。再読み込みせずに戻る場合には下記のようにします。
<a href="javascript:history.back()">戻る</a>

2 つ前のページに戻りたい場合、下記のようにします。
<a href="javascript:history.go(-2)">戻る</a>

2.4 郵便番号から住所の入力補助
 郵便番号を入力すると、住所の途中まで自動で入力されるフォームは ajaxzip3 という他者サービスを利用して、下記のよう
にします。
<script src="https://ajaxzip3.github.io/ajaxzip3.js" charset="UTF-8"></script>
<table>
<tr>
<td>郵便番号</td>
<td><input type="text" size="10" maxlength="8"
onkeyup="AjaxZip3.zip2addr(this,'','addr01','addr01')" name="zip01"></td>
</tr>
<tr>
<td>住所</td>
<td><input size="40" name="addr01" type="text"> (自動入力されます)</td>
</tr>
</table>


3. PHP による CGI の作成
　PHP による CGI 作成手順について説明します。CGI とは Common Gateway Interface の略で、Web ブラウザからデータを
送信し、そのデータを処理するための仕組みのことをいいます。起動されるプログラムはいろいろな言語で書くことができます
が、PHP 言語もその一つとなっています。
　$_POST という配列変数はオートグローバル変数と呼ばれるもので、PHP が呼ばれるときに予め値がセットされています。
$_POST 配列のインデックスの中身は、name 属性で指定した名前が入ります。$name には入力した値、何も入力していなけれ
ばそのまま ”ここに名前を入力してね” という文字列が入ります。$_POST の一般的な使い方は下記のとおりです。テキストフィ
ールドでは、value 属性はユーザーが入力した文字列になりますが、他のフォームコントロールでは、value 属性で指定した値
が入ります。
$変数 = $_POST[‘name 属性で指定した文字列’];

　C 言語や Perl 言語では送られてくるフォームデータを参照するために多くのコードを書く必要があります。
チェックボックス、ラジオボタン、テキストフィールド、パスワードフィールド、テキストエリア、ドロップダウン型リスト、
複数選択可能リストの全てが同じ方法で取得できます。
